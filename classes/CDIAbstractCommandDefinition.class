<?php

/**
 * Defines an abstract base command definition that provides most of the key
 * features needed through a convienent constructor.
 */
abstract class CDIAbstractCommandDefinition implements CDICommandModuleDefinitionInterface {
  
  /**
   * The name of the facade class.
   * 
   * @var string $facadeClassName
   */
  private $facadeClassName;
  
  /**
   * An array of methods used with this command.
   * 
   * @var array $methods
   */
  private $methods = array();
  
  /**
   * The name of the command class.
   * 
   * @var string $commandClassName
   */
  private $commandClassName;
  
  /**
   * A label for this command definition.
   * 
   * @var string $commandLabel
   */
  private $commandLabel;
  
  /**
   * An array of CDIDataInterface classes that are supported by this command.
   * 
   * @var array $dataClasses
   */
  private $dataClasses;
  
  /**
   * An array of CDIReceiverInterface classes that are supported by this 
   * command.
   * 
   * @var array $receiverClasses
   */
  private $receiverClasses;
  
  /**
   * A shortcut string that can be used by CDIDataInterface::facade() instead of
   * $facadeClassName.
   * 
   * @var string $shortcut
   */
  private $shortcut;
  
  /**
   * Constructs an instance of this object.
   * 
   * @param string $label
   *   The label for this command definition.
   * @param string $shortcut
   *   The shortcut string for this command definition.
   * @param string $commandClass
   *   The command class that is used by this command definition.
   * @param string $facadeClass
   *   The facade class that is used by this command definition.
   * @param array $dataClasses
   *   The data classes that this command definition accepts.
   * @param array $receiverClasses
   *   The receiver classes that this command definition accepts.
   * @param array $methods
   *   The methods that this command definition will add when used as a 
   *   facade.
   */
  public function __construct($label, $shortcut, $commandClass, $facadeClass, array $dataClasses = array(), array $receiverClasses = array(), array $methods = array()) {
    $this->commandLabel = $label;
    $this->shortcut = $shortcut;
    $this->commandClassName = $commandClass;
    $this->facadeClassName = $facadeClass;
    $this->dataClasses = $dataClasses;
    $this->receiverClasses = $receiverClasses;
    $this->methods = $methods;
  }
  
  public function getShortcut() {
    return $this->shortcut;
  }
  
  public function getMethods() {
    return $this->methods;
  }
  
  public function getFacadeClass() {
    return $this->facadeClassName;
  }
  
  public function getCommandClass() {
    return $this->commandClassName;
  }
  
  public function getModuleLabel() {
    return $this->commandLabel;
  }
  
  public function validateReceiver(CDIReceiverInterface $receiver, CDIDataInterface $data) {
    $reflect = new ReflectionClass(get_class($receiver));
    foreach ($this->receiverClasses as $receiverClass) {
      if ($reflect->isSubclassOf($receiverClass)) {
        return TRUE;
      }
      if ($reflect->implementsInterface($receiverClass)) {
        return TRUE;
      }
    }
    return FALSE;
  }
  
  public function validateData(CDIDataInterface $data) {
    $reflect = new ReflectionClass(get_class($data));
    foreach ($this->dataClasses as $dataClass) {
      if ($reflect->isSubclassOf($dataClass)) {
        return TRUE;
      }
      if ($reflect->implementsInterface($dataClass)) {
        return TRUE;
      }
    }
    return FALSE;
  }
  
}