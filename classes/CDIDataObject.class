<?php

/**
 * A basic CDIDataObject that should be good enough for most cases. Data
 * types with more specific needs can extend this class further.
 * 
 * Extensions need to match the constructor (eg it should be possible to build
 * an object with just a data type definition).
 */
class CDIDataObject extends CDIAbstractData implements CDIDataObjectInterface {
  
  /**
   * The data type.
   * 
   * @var CDIDataType
   */
  private $dataType = NULL;
  
  /**
   * Storage for arbitrary data.
   * 
   * @var array
   */
  private $rawData = array();
  
  /**
   * Constructs an instance of this object.
   * 
   * @param CDIDataType $dataType
   */
  public function __construct(CDIDataType $dataType) {
    $this->dataType = $dataType;
  }
  
  public function facade($facadeType) {
    return parent::buildFacade($facadeType, 'CDIDataObjectFacadeInterface', $this);
  }
 
  /**
   * This magic method allows the use of facades without explicitly calling
   * facade(). 
   * 
   * Essentially, whenever a method is called on this object that is not 
   * recognized, the list of facades is checked for one that provides the 
   * given method. If found, this object is facaded into the appropriate facade
   * and then the method is called on that facade, with all the provided 
   * arguments.
   * 
   * While using facade() is clearer, this allows for a quick shortcut method
   * for lazy programmers if they want to use it.
   * 
   * Note that this function throws the same exceptions as facade() if there
   * is no supported facade for the given function name.
   * 
   * @param string $name
   *   The name of the function called.
   * @param array $arguments
   *   An array of arguments.
   * 
   * @return mixed
   *   Appropriate return value for the function.
   */
  public function __call($name, $arguments) {
    return parent::executeMethod($name, $arguments);
  }
  
  public function getDataType() {
    return $this->dataType;
  }
  
  public function getRawValue($key) {
    return $this->rawData[$key];
  }
  
  public function setRawValue($key, $value) {
    $this->rawData[$key] = $value;
  }
  
  public function fireCommand(CDITypedCommandInterface $command) {
    if ($command instanceof CDIDataObjectCommandInterface) {
      $command->setDataObject($this);
    }
    // support for DataType commands
    elseif ($command instanceof CDIDataTypeCommandInterface) {
      $command->setDataType($this->getDataType());
    }
    parent::fireGenericCommand($command);
  }
  
}
