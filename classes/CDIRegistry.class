<?php

/**
 * Generic registry class that can function anywhere.
 */
class CDIRegistry 
    implements CDIRegistryInterface, 
               CDIDataTypeRegistryInterface,
               CDICommandModuleRegistryInterface,
               CDIEventRegistryInterface {
  
  /**
   * Sorts an array of receivers.
   * 
   * @param array $delegate1
   *   The first receiver.
   * @param array $delegate2
   *   The second receiver.
   * 
   * @return int
   *   Integer to compare them with.
   */
  public static function compareReceiverEntries($delegate1, $delegate2) {
    return $delegate1['weight'] - $delegate2['weight'];
  }
  
  /**
   * An array of receivers.
   * 
   * @var array
   */
  private $receivers = array();
  
  /**
   * A flag to check if the receivers need to be sorted by weight.
   * 
   * @var boolean
   */
  private $sorted = TRUE;
  
  /**
   * An array of data types.
   * 
   * @var array
   */
  private $types = array();
  
  /**
   * An array of command module definitions.
   * 
   * @var array
   */
  private $commands = array();
  
  /**
   * An array of event handlers.
   * 
   * @var array
   */
  private $handlers = array();
  
  /**
   * Whether or not the handlers are sorted.
   * 
   * @var boolean
   */
  private $sortedHandlers = TRUE;
  
  public function findFacadeFromShortcut($facadeType) {
    foreach ($this->commands as $command) {
      if ($facadeType == $command->getShortcut()) {
        return $command->getFacadeClass();
      }
    }
    return NULL;
  }
  
  public function registerEventHandler(CDIEventHandlerInterface $handler, $weight = 0) {
    $this->handlers[] = array(
      'handler' => $handler,
      'weight' => $weight
    );
    $this->sortedHandlers = FALSE;
  }
  
  public function registerCommandModule(CDICommandModuleDefinitionInterface $command) {
    $this->commands[$command->getCommandClass()] = $command;
  }
  
  public function registerDataType(CDIDataTypeInterface $dataType) {
    $this->types[$dataType->getDataTypeName()] = $dataType;
  }
  
  public function loadDataType($key) {
    if (isset($this->types[$key])) {
      return $this->types[$key];
    }
    throw new CDIException('CDI-1003', 'CDI Data Type not found for !key', array(
      '!key' => $key,
    ));
  }
  
  public function listDataTypes() {
    return $this->types;
  }
  
  public function registerReceiver(CDIReceiverInterface $receiver, $weight = 0) {
    $this->receivers[] = array(
      'class' => $receiver,
      'weight' => $weight,
    );
    $this->sorted = FALSE;
  }
  
  public function fireCommand(CDICommandInterface $command) {
    if (!$this->sorted) {
      uasort($this->receivers, array('CDIRegistry', 'compareReceiverEntries'));
      array_reverse($this->receivers);
      $this->sorted = TRUE;
    }
    foreach ($this->receivers as $receiver) {
      if ($command->validReceiver($receiver['class'])) {
        $command->executeAction($receiver['class']);
        return;
      }
    }
    throw new CDIException('CDI-1000', 'Receiver not found for command !command', array(
      '!command' => $command->toString(),
    ));
  }
  
  public function fireEvent(CDIEventInterface $event) {
    if (!$this->sortedHandlers) {
      uasort($this->handlers, array('CDIRegistry', 'compareReceiverEntries'));
      array_reverse($this->handlers);
      $this->sortedHandlers = TRUE;
    }
    $found = 0;
    foreach ($this->handlers as $handler) {
      if ($event->verifyHandler($handler['handler'])) {
        $event->executeEventHandler($handler['handler']);
        $found++;
        if (!$event->checkContinue()) {
          return $found;
        }
      }
    }
    return $found;
  }
  
  public function checkFacadeSupport(CDIFacadeInterface $facade, CDIDataInterface $data) {
    $class = get_class($facade);
    foreach ($this->commands as $commandDefinition) {
      if ($commandDefinition->getFacadeClass() == $class) {
        return $this->checkModuleSupport($commandDefinition, $data);
      }
    }
    return FALSE;
  }
  
  public function checkModuleSupport(CDICommandModuleDefinitionInterface $def, CDIDataInterface $data) {
    if (!$def->validateData($data)) {
      return FALSE;
    }
    foreach ($this->receivers as $receiver) {
      if ($def->validateReceiver($receiver, $data)) {
        return TRUE;
      }
    }
    return FALSE;
  }
  
}