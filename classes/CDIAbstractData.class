<?php

/**
 * An abstract parent class that provides some functionality that is useful to
 * both datatypes, dataobjects and their facades.
 */
abstract class CDIAbstractData implements CDIDataInterface {
  
  /**
   * Creates a facade around the given item, if it meets certain conditions.
   * 
   * Conditions:
   * - If $facadeType is a shortcut name, it must be found in the command 
   *   registry. If it is not, it throws an error. If it is, the facade class
   *   from the command registry is used as $facadeType.
   * - If the class represented by $facadeType does not exist, it throws an
   *   error.
   * - If the class represented by $facadeType does not implement 
   *   $facadeInterface, it throws an error.
   * 
   * @param string $facadeType
   *   A class name for a facade or a shortcut string for one.
   * @param string $facadeInterface
   *   The interface that the facade must implement to be valid.
   * @param CDIDataInterface $wrappedObject
   *   The object that we will wrap for the facade.
   * @param boolean $useShortcut
   *   If FALSE, the shortcut name step is skipped (saving time).
   * @param boolean $useMethodLookup
   *   If FALSE, the method step is skipped (saving time).
   * 
   * @return CDIFacadeInterface
   *   An implementation of CDIFacadeInterface that is valid for the given
   *   parameters.
   * 
   * @throws CDIException
   *   If one of the conditions fails.
   */
  protected function buildFacade($facadeType, $facadeInterface, $wrappedObject, $useShortcut = TRUE, $useMethodLookup = TRUE) {
    $exists = class_exists($facadeType);
    if ($useShortcut && (!$exists)) {
      $actualType = CDI::getCommandRegistry()->findFacadeFromShortcut($facadeType);
      if (!empty($actualType)) {
        $facadeType = $actualType;
        $exists = class_exists($facadeType);
      }
    }
    if ($useMethodLookup && (!$exists)) {
      $actualType = CDI::getCommandRegistry()->findFacadeFromMethod($facadeType);
      if (!empty($actualType)) {
        $facadeType = $actualType;
        $exists = class_exists($facadeType);
      }
    }
    if ($exists) {
      $implements = class_implements($facadeType);
      if (!is_array($facadeInterface)) {
        $facadeInterface = array($facadeInterface);
      }
      foreach ($facadeInterface as $iface) {
        if (in_array($iface, $implements)) {
          return new $facadeType($wrappedObject);
        }
      }
      throw new CDIException('CDI-1005', 'Unable to build facade for type, does not implement correct interface [!facade]', array(
        '!facade' => $facadeType,
      ));
    }
    throw new CDIException('CDI-1002', 'Unable to build facade for type, class does not exist [!facade]', array(
      '!facade' => $facadeType,
    ));
  }
  
  /**
   * Executes a generic command.
   * 
   * This uses the command registry to lookup the appropriate facade for the
   * specified method. Designed for use by the magic __call() method.
   * 
   * @param string $methodName
   *   Name of the method.
   * @param array $args
   *   Array of arguments for $methodName.
   * 
   * @return mixed
   *   Appropriate return value for the function.
   */
  public function executeMethod($methodName, array $args = array()) {
    $facade = CDI::getCommandRegistry()->findFacadeFromMethod($methodName);
    $wrapper = $this->facade($facade);
    return call_user_func_array(array($wrapper, $methodName), $args);
  }
  
  /**
   * Fires a command, regardless of its type, up to the registry.
   * 
   * Implementing interfaces should use this to fire commands, so that they
   * don't have to worry about targeting the registry.
   * 
   * @param CDICommandInterface $command
   *   The command to fire.
   */
  protected function fireGenericCommand(CDICommandInterface $command) {
    CDI::getRegistry()->fireCommand($command);
  }
  
}
