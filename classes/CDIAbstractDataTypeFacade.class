<?php

/**
 * Represents a general data type facade. Most data type facades will want
 * to extend from this.
 */
abstract class CDIAbstractDataTypeFacade extends CDIAbstractData implements CDIDataTypeFacadeInterface {
  
  /**
   * The data type for this facade.
   * 
   * @var CDIDataTypeInterface
   */
  private $object = NULL;
  
  public function __construct(CDIDataTypeInterface $dataObject) {
    $this->object = $dataObject;
  }
  
  public function getDataTypeName() {
    return $this->object->getDataTypeName();
  }
  
  public function facade($facadeType) {
    return parent::buildFacade($facadeType, 'CDIDataTypeFacadeInterface', $this);
  }
  
  public function strip() {
    return $this->object;
  }
  
  public function fireCommand(CDIDataTypeCommandInterface $command) {
    $this->object->fireCommand($command);
  }
  
  public function checkSupport() {
    return CDI::getCommandRegistry()->checkFacadeSupport($this, $this->object);
  }
  
  public function checkObjectSupport($facadeType) {
    return $this->object->checkObjectSupport($facadeType);
  }
  
  /**
   * This magic method allows the use of facades without explicitly calling
   * facade(). 
   * 
   * Essentially, whenever a method is called on this object that is not 
   * recognized, the list of facades is checked for one that provides the 
   * given method. If found, this object is facaded into the appropriate facade
   * and then the method is called on that facade, with all the provided 
   * arguments.
   * 
   * While using facade() is clearer, this allows for a quick shortcut method
   * for lazy programmers if they want to use it.
   * 
   * Note that this function throws the same exceptions as facade() if there
   * is no supported facade for the given function name.
   * 
   * @param string $name
   *   The name of the function called.
   * @param array $arguments
   *   An array of arguments.
   * 
   * @return mixed
   *   Appropriate return value for the function.
   */
  public function __call($name, $arguments) {
    return parent::executeMethod($name, $arguments);
  }
  
}